/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#ifndef PLUGINWRAPPER_H_INCLUDED
#define PLUGINWRAPPER_H_INCLUDED

#include "../JuceLibraryCode/JuceHeader.h"


//==============================================================================
/**
*/
class PluginWrapper  : public AudioPluginInstance,
								public ActionBroadcaster
{
public:
    //==============================================================================
    PluginWrapper(AudioPluginInstance* instance);
							
    ~PluginWrapper();
	
	void fillInPluginDescription(PluginDescription & description) const;
	void fillInPluginDescription(const PluginDescription & description) const;
	
    //==============================================================================
    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;

    virtual void processBlock (AudioSampleBuffer&, MidiBuffer&) override;

    //==============================================================================
    AudioProcessorEditor* createEditor() override;
    bool hasEditor() const override;

    //==============================================================================
    const String getName() const override;

    int getNumParameters() override;
    float getParameter (int index) override;
    void setParameter (int index, float newValue) override;

    const String getParameterName (int index) override;
    const String getParameterText (int index) override;
	
	String getPluginName()
	{
		return pluginName;
	}
	
	void setPluginName(String name)
	{
		pluginName = name;
	}
	
	void shouldBypass(bool val)
	{
		const ScopedLock sl (getCallbackLock());
		isBypassed = val;
	}
	
	void shouldMute(bool val)
	{
		const ScopedLock sl (getCallbackLock());
		isMuted = val;
	}
	
    const String getInputChannelName (int channelIndex) const override;
    const String getOutputChannelName (int channelIndex) const override;
    bool isInputChannelStereoPair (int index) const override;
    bool isOutputChannelStereoPair (int index) const override;

    bool acceptsMidi() const override;
    bool producesMidi() const override;
    bool silenceInProducesSilenceOut() const override;
    double getTailLengthSeconds() const override;
	void getStateInformation (MemoryBlock& destData);
	void setStateInformation (const void* data, int sizeInBytes);
	
    //==============================================================================
    int getNumPrograms() override;
    int getCurrentProgram() override;
    void setCurrentProgram (int index) override;
    const String getProgramName (int index) override;
    void changeProgramName (int index, const String& newName) override;

	ScopedPointer<AudioPluginInstance> vstInstance;
private:
	CriticalSection callbackLock;
	PluginDescription pluginDesc;
	bool isBypassed, isMuted;
	String pluginName;
	int updateCounter;
	
    //==============================================================================
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (PluginWrapper)
};


#endif  // PLUGINPROCESSOR_H_INCLUDED
