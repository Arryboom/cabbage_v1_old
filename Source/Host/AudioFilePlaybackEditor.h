/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#ifndef __PLUGINEDITOR_H_266C4137__
#define __PLUGINEDITOR_H_266C4137__

#include "../JuceLibraryCode/JuceHeader.h"
#include "AudioFilePlaybackProcessor.h"

class WaveformDisplay : public Component,
						public Timer
{
public:
	WaveformDisplay(AudioFormatManager& formatManager, BufferingAudioSource &source, int sr):
	thumbnailCache (5), 
	thumbnail (512, formatManager, thumbnailCache), 
	source(source), 
	sampleRate(sr),
	currentPlayPosition(0)
	{	

	}
	
	~WaveformDisplay(){	
	}
	
    void setFile (const File& file)
    {
        thumbnail.setSource (new FileInputSource (file));
        startTime = 0;
        endTime = thumbnail.getTotalLength();
		//Logger::writeToLog("End time: "+String(endTime));
    }

    void setZoomFactor (double amount)
    {
        if (thumbnail.getTotalLength() > 0)
        {
            const double newScale = jmax (0.001, thumbnail.getTotalLength() * (1.0 - jlimit (0.0, 0.99, amount)));
            const double timeAtCentre = xToTime (getWidth() / 2.0f);
            //startTime = timeAtCentre - newScale * 0.5;
            //endTime = timeAtCentre + newScale * 0.5;
            repaint();
        }
    }

    void paint (Graphics& g)
    {
        g.fillAll (Colours::black);
        g.setColour (Colours::lime);

        if (thumbnail.getTotalLength() > 0)
        {
            thumbnail.drawChannels (g, getLocalBounds(),
                                    startTime, endTime, 2.0f);
        }
        else
        {
            g.setFont (14.0f);
            g.drawFittedText ("(No audio file selected)", getLocalBounds(), Justification::centred, 2);
        }

		g.setColour(Colours::yellow);
		g.drawLine(timeToX(currentPlayPosition), 0, timeToX(currentPlayPosition), getHeight(), 2);
    }


    void timerCallback()
    {
		currentPlayPosition = source.getNextReadPosition()/sampleRate;
		//Logger::writeToLog("Position in time: "+String(currentPlayPosition));
		//Logger::writeToLog("Position in pixels: "+String(timeToX(currentPlayPosition)));
		//Logger::writeToLog(String(startTime));
		repaint();
    }

    void mouseDown (const MouseEvent& e)
    {
		source.setNextReadPosition (jmax (0.0, xToTime ((float) e.x)*sampleRate));
		currentPlayPosition = jmax (0.0, xToTime ((float) e.x));
		repaint();
    }


private:
    BufferingAudioSource& source;
    //Slider& zoomSlider;
    AudioThumbnailCache thumbnailCache;
    AudioThumbnail thumbnail;
    double startTime, endTime;
	Rectangle<int> localBounds;
	float sampleRate;
	double currentPlayPosition;

    DrawableRectangle currentPositionMarker;

    float timeToX (const double time) const
    {
        return getWidth() * (float) ((time - startTime) / (endTime - startTime));
    }

    double xToTime (const float x) const
    {
        return (x / getWidth()) * (endTime - startTime) + startTime;
    }
};
//==============================================================================
/**
*/
class AudioFilePlaybackEditor  : public AudioProcessorEditor,
											public Button::Listener
{
public:
    AudioFilePlaybackEditor (AudioFilePlaybackProcessor* ownerFilter);
    ~AudioFilePlaybackEditor();

    //CabbagePluginAudioProcessor* filter;
    AudioFilePlaybackProcessor* getFilter() const
	{
			return static_cast <AudioFilePlaybackProcessor*> (getAudioProcessor());
	}

    //==============================================================================
    // This is just a standard Juce paint method...
    void paint (Graphics& g);
	void resized();
	void buttonClicked(Button *button);
	ScopedPointer<WaveformDisplay> waveformDisplay;
	TextButton startStop;
    TextButton loadFile;
	ScopedPointer<Viewport> viewport;
};


#endif  // __PLUGINEDITOR_H_266C4137__
