/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "PluginWrapperProcessor.h"
#include "PluginWrapperEditor.h"
#include "../CabbageUtils.h"


//==============================================================================
PluginWrapperProcessor::PluginWrapperProcessor(AudioPluginInstance* instance)
{
	updateCounter = 0;
	vstInstance = instance;
	if(!vstInstance)
		assert(0);
}

PluginWrapperProcessor::~PluginWrapperProcessor()
{
}

//==============================================================================
const String PluginWrapperProcessor::getName() const
{
    return JucePlugin_Name;
}

int PluginWrapperProcessor::getNumParameters()
{
    return 0;
}

float PluginWrapperProcessor::getParameter (int index)
{
    return 0.0f;
}

void PluginWrapperProcessor::setParameter (int index, float newValue)
{
}

const String PluginWrapperProcessor::getParameterName (int index)
{
    return String();
}

const String PluginWrapperProcessor::getParameterText (int index)
{
    return String();
}

const String PluginWrapperProcessor::getInputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

const String PluginWrapperProcessor::getOutputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

bool PluginWrapperProcessor::isInputChannelStereoPair (int index) const
{
    return true;
}

bool PluginWrapperProcessor::isOutputChannelStereoPair (int index) const
{
    return true;
}

bool PluginWrapperProcessor::acceptsMidi() const
{
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool PluginWrapperProcessor::producesMidi() const
{
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

bool PluginWrapperProcessor::silenceInProducesSilenceOut() const
{
    return false;
}

double PluginWrapperProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int PluginWrapperProcessor::getNumPrograms()
{
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
                // so this should be at least 1, even if you're not really implementing programs.
}

int PluginWrapperProcessor::getCurrentProgram()
{
    return 0;
}

void PluginWrapperProcessor::setCurrentProgram (int index){}

const String PluginWrapperProcessor::getProgramName (int index)
{
    return String();
}

void PluginWrapperProcessor::changeProgramName (int index, const String& newName){}

//==============================================================================
void PluginWrapperProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    // Use this method as the place to do any pre-playback
    // initialisation that you need..
	if(vstInstance)
		vstInstance->prepareToPlay(sampleRate,samplesPerBlock);
}

void PluginWrapperProcessor::releaseResources(){}

void PluginWrapperProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
    vstInstance->processBlock(buffer,midiMessages);
	const float rmsLeft = buffer.getRMSLevel(0, 0, buffer.getNumSamples());
	const float rmsRight = buffer.getRMSLevel(1, 0, buffer.getNumSamples());
	
	
	if(updateCounter==0) 
		sendActionMessage(String(rmsLeft)+" "+String(rmsRight));
		
	updateCounter++;
	if(updateCounter>5)
		updateCounter=0;
}

//==============================================================================
bool PluginWrapperProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* PluginWrapperProcessor::createEditor()
{
    return new PluginWrapperEditor (*this);
}

//==============================================================================
void PluginWrapperProcessor::getStateInformation (MemoryBlock& destData){}
void PluginWrapperProcessor::setStateInformation (const void* data, int sizeInBytes){}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter(AudioPluginInstance* instance)
{
    return new PluginWrapperProcessor(instance);
}
